<svg width="512" height="512" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg">
  <!-- Gradient background -->
  <defs>
    <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#3A7D9F;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#2E5F7F;stop-opacity:1" />
    </linearGradient>
    <filter id="shadow" x="-20%" y="-20%" width="140%" height="140%">
      <feDropShadow dx="0" dy="4" stdDeviation="8" flood-color="#000000" flood-opacity="0.25"/>
    </filter>
  </defs>
  
  <!-- Background circle -->
  <circle cx="256" cy="256" r="240" fill="url(#grad1)" filter="url(#shadow)"/>
  
  <!-- Inner circle for depth -->
  <circle cx="256" cy="256" r="220" fill="none" stroke="#FFFFFF" stroke-width="2" opacity="0.2"/>
  
  <!-- LSD Text -->
  <text x="256" y="290" text-anchor="middle" fill="#FFFFFF" font-family="Arial, sans-serif" font-size="140" font-weight="bold" letter-spacing="8">LSD</text>
  
  <!-- Subtitle -->
  <text x="256" y="340" text-anchor="middle" fill="#FFFFFF" font-family="Arial, sans-serif" font-size="24" opacity="0.8">DÉVELOPPEMENT</text>
  
  <!-- Document/Chart icon overlay -->
  <g transform="translate(380, 120)" opacity="0.3">
    <rect x="0" y="0" width="60" height="80" rx="4" fill="#FFFFFF"/>
    <rect x="8" y="12" width="44" height="3" fill="#3A7D9F"/>
    <rect x="8" y="20" width="32" height="3" fill="#3A7D9F"/>
    <rect x="8" y="28" width="38" height="3" fill="#3A7D9F"/>
    <polygon points="8,40 20,50 32,45 44,55 52,48 52,65 8,65" fill="#3A7D9F"/>
  </g>
</svg>

<picture>
  <source srcSet="/icon.webp" type="image/webp" />
  <img src="/icon.png" alt="LSD Logo" />
</picture>

<img loading="lazy" src="..." /> 

// Cache stratégique par type de ressource
const CACHE_STRATEGIES = {
  static: 'CacheFirst',    // Icons, CSS
  api: 'NetworkFirst',     // Gemini calls
  documents: 'StaleWhileRevalidate' // PDFs
}; 

// Persistence sélective
const usePersistedState = (key, initialValue) => {
  const [state, setState] = useState(() => {
    try {
      return JSON.parse(localStorage.getItem(key)) ?? initialValue;
    } catch {
      return initialValue;
    }
  });
  
  useEffect(() => {
    localStorage.setItem(key, JSON.stringify(state));
  }, [key, state]);
  
  return [state, setState];
}; 

// Tracking automatique
import { getCLS, getFID, getFCP, getLCP, getTTFB } from 'web-vitals';

getCLS(console.log);
getFID(console.log);
getLCP(console.log); 

// ✅ SOLUTION: Cache intelligent avec TTL
class APICache {
  private cache = new Map<string, { data: any; timestamp: number; ttl: number }>();

  set(key: string, data: any, ttl: number = 300000) { // 5min default
    this.cache.set(key, { data, timestamp: Date.now(), ttl });
  }

  get(key: string) {
    const entry = this.cache.get(key);
    if (!entry) return null;
    
    if (Date.now() - entry.timestamp > entry.ttl) {
      this.cache.delete(key);
      return null;
    }
    
    return entry.data;
  }
}

const apiCache = new APICache();

// ✅ Service avec cache et retry
export const extractConventionDataFromTranscript = async (
  transcript: string,
  options: { useCache?: boolean; retries?: number } = {}
): Promise<Partial<ConventionData>> => {
  const { useCache = true, retries = 3 } = options;
  const cacheKey = `extract_${btoa(transcript.slice(0, 100))}`;

  // ✅ Check cache first
  if (useCache) {
    const cached = apiCache.get(cacheKey);
    if (cached) return cached;
  }

  // ✅ Retry logic
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      const response = await fetch(`${API_BASE_URL}/api/extract-convention-data`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ transcript }),
        signal: AbortSignal.timeout(15000), // 15s timeout
      });

      if (!response.ok) throw new Error(`HTTP ${response.status}`);
      
      const data = await response.json();
      
      // ✅ Cache successful response
      if (useCache) apiCache.set(cacheKey, data);
      
      return data;
    } catch (error) {
      if (attempt === retries) throw error;
      
      // ✅ Exponential backoff
      await new Promise(resolve => 
        setTimeout(resolve, Math.pow(2, attempt) * 1000)
      );
    }
  }
}; 

// ✅ SOLUTION: Lazy loading conditionnel
const PDFProcessor = React.lazy(() => 
  import('./components/PDFProcessor').then(module => ({
    default: module.PDFProcessor
  }))
);

const ConventionForm = React.lazy(() => 
  import('./components/ConventionForm')
);

// ✅ Chargement conditionnel des services
const loadPDFService = () => import('./services/pdfService');
const loadGeminiService = () => import('./services/geminiService');

// Usage dans App.tsx
const [showPDFProcessor, setShowPDFProcessor] = useState(false);

return (
  <div>
    {!showPDFProcessor ? (
      <button onClick={() => setShowPDFProcessor(true)}>
        Charger PDF Processor
      </button>
    ) : (
      <Suspense fallback={<PDFProcessorSkeleton />}>
        <PDFProcessor />
      </Suspense>
    )}
  </div>
); 

// ✅ SOLUTION: useReducer pour state complexe
interface AppState {
  transcript: string;
  conventionData: ConventionData;
  ui: {
    isExtractingData: boolean;
    isGeneratingProposal: boolean;
    isParsingPdf: boolean;
  };
  errors: {
    extraction: string | null;
    proposal: string | null;
    pdfParse: string | null;
  };
}

const appReducer = (state: AppState, action: AppAction): AppState => {
  switch (action.type) {
    case 'SET_TRANSCRIPT':
      return { ...state, transcript: action.payload };
    case 'UPDATE_CONVENTION_DATA':
      return { 
        ...state, 
        conventionData: { ...state.conventionData, ...action.payload }
      };
    case 'SET_UI_STATE':
      return { ...state, ui: { ...state.ui, ...action.payload } };
    default:
      return state;
  }
};

// Usage dans App.tsx
const [state, dispatch] = useReducer(appReducer, initialState); 

// ✅ SOLUTION: Composants mémorisés
const ConventionForm = React.memo(({ 
  data, 
  onDataChange, 
  isExtracted 
}: ConventionFormProps) => {
  // ✅ Callbacks mémorisés
  const handleChange = useCallback((key: keyof ConventionData, value: string) => {
    onDataChange(key, value);
  }, [onDataChange]);

  // ✅ Calculs lourds mémorisés
  const sanitizedHtml = useMemo(() => {
    if (!commercialProposal) return { __html: '' };
    return { __html: marked.parse(commercialProposal) };
  }, [commercialProposal]);

  // ✅ Validation mémorisée
  const isFormValid = useMemo(() => {
    return data.client_nom && data.formation_intitule;
  }, [data.client_nom, data.formation_intitule]);

  return (
    // JSX optimisé
  );
}, (prevProps, nextProps) => {
  // ✅ Comparaison personnalisée pour éviter re-renders
  return (
    prevProps.data === nextProps.data &&
    prevProps.isExtracted === nextProps.isExtracted &&
    prevProps.commercialProposal === nextProps.commercialProposal
  );
}); 

// ✅ SOLUTION: Hook de debouncing personnalisé
const useDebounce = <T>(value: T, delay: number): T => {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => clearTimeout(handler);
  }, [value, delay]);

  return debouncedValue;
};

// Usage dans ConventionForm
const ConventionForm = ({ data, onDataChange }: Props) => {
  const [localData, setLocalData] = useState(data);
  const debouncedData = useDebounce(localData, 300);

  useEffect(() => {
    if (debouncedData !== data) {
      // Seulement après 300ms de pause
      Object.keys(debouncedData).forEach(key => {
        if (debouncedData[key] !== data[key]) {
          onDataChange(key as keyof ConventionData, debouncedData[key]);
        }
      });
    }
  }, [debouncedData]);

  const handleLocalChange = (key: keyof ConventionData, value: string) => {
    setLocalData(prev => ({ ...prev, [key]: value }));
  };
}; 

// ✅ SOLUTION: Skeleton components
const ConventionFormSkeleton = () => (
  <div className="bg-white p-6 rounded-lg shadow-md mt-8 animate-pulse">
    <div className="h-6 bg-gray-300 rounded w-1/3 mb-6"></div>
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
      {Array.from({ length: 8 }).map((_, i) => (
        <div key={i} className="space-y-2">
          <div className="h-4 bg-gray-300 rounded w-1/4"></div>
          <div className="h-10 bg-gray-200 rounded"></div>
        </div>
      ))}
    </div>
  </div>
);

// ✅ Progressive loading
const App = () => {
  const [isHydrated, setIsHydrated] = useState(false);
  
  useEffect(() => {
    setIsHydrated(true);
  }, []);

  if (!isHydrated) {
    return <AppSkeleton />;
  }

  return <ActualApp />;
}; 

// ✅ SOLUTION: Préparation pour listes longues
import { FixedSizeList as List } from 'react-window';

const ConventionList = ({ conventions }: { conventions: ConventionData[] }) => (
  <List
    height={400}
    itemCount={conventions.length}
    itemSize={80}
    itemData={conventions}
  >
    {({ index, style, data }) => (
      <div style={style}>
        <ConventionItem data={data[index]} />
      </div>
    )}
  </List>
); 